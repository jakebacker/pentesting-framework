#!/usr/bin/python3

import sys, getopt
import pt_nmap
import time


usage = """
pentest.py <options> -t <type>
pentest.py <options> --type=<type>

Options:
-h, --help:
	Prints this help message
-o, --odir:
	The output directory for all command outputs. By default, this script does not write any data to files.
-n, --nmap:
	A list of additional arguments to pass to nmap
-t, --type:
	The type of test to be done. Options are shown below
-a, --address:
	The ip address (or range) to scan

Types:

full:
	A full scan will carry out all operations including multiple nmap scans, gobuster scans (if applicable), <MORE>, and may carry out basic exploitation techniques
ports:
	This will just run nmap port scans
enumerate:
	This will run all enumeration scans, but will not actively exploit anything

"""

def main(argv):
	outputdir = ''
	nmap_args = ''
	type = ''
	address = ''

	# Parse args
	try:
		opts, args = getopt.getopt(argv,"ho:n:t:a:", ["help", "odir=", "nmap=", "type=","address="]
	except getopt.GetoptError:
		print(usage)
		sys.exit(2)
	for opt, arg in opts:
		if opt in ("-h", "--help"):
			print(usage)
			sys.exit()
		elif opt in ("-o", "--odir"):
			outputdir = arg
		elif opt in ("-n", "--nmap"):
			nmap_args = arg
		elif opt in ("-t", "--type"):
			type = arg
		elif opt in ("-a", "--address"):
			address = arg

	if type not in ("full", "ports", "enumerate"):
		print(usage)
		sys.exit(2)

	
	# Detect OS versions
	nm = pt_nmap.scan(address, "os_detection", False, "")

	hosts = nm.all_hosts()

	for h in hosts:
		os = str(nm['scan'][h]['osmatch'][1])
		
		windows = False

		if 'windows' in os or 'Windows' in os:
			windows = True

		# Perform initial scans
		
		perform_scan_async(h, "tcp_fast", windows, nmap_args)
		perform_scan_async(h, "tcp_full", windows, nmap_args)
		perform_scan_async(h, "udp_fast", windows, nmap_args)
		perform_scan_async(h, "udp_full", windows, nmap_args)


	# Process results as they come in
	results_count = 0

	while results_count < 4:
		time.sleep(5)

		for r in pt_nmap.scan_results:
			results_count += 1

			# Process
		
		pt_nmap.scan_results = []

if __name__ == "__main__":
	main(sys.argv[1:])

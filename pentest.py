#!/usr/bin/python3

import sys, getopt
import os
import pt_nmap
import time
from multiprocessing import Manager


usage = """
pentest.py <options> -t <type>
pentest.py <options> --type=<type>

Options:
-h, --help:
	Prints this help message
-o, --odir:
	The output directory for all command outputs. By default, this script does not write any data to files.
-n, --nmap:
	A list of additional arguments to pass to nmap
-t, --type:
	The type of test to be done. Options are shown below
-a, --address:
	The ip address (or range) to scan

Types:

full:
	A full scan will carry out all operations including multiple nmap scans, gobuster scans (if applicable), <MORE>, and may carry out basic exploitation techniques
ports:
	This will just run nmap port scans
enumerate:
	This will run all enumeration scans, but will not actively exploit anything

"""

def main(argv):
	outputdir = ''
	nmap_args = ''
	type = ''
	address = ''

	if os.geteuid() != 0:
		print("This script must be run as root! Exiting...")
		sys.exit(1)

	# Parse args
	try:
		opts, args = getopt.getopt(argv,"ho:n:t:a:", ["help", "odir=", "nmap=", "type=","address="])
	except getopt.GetoptError:
		print(usage)
		sys.exit(2)
	for opt, arg in opts:
		if opt in ("-h", "--help"):
			print(usage)
			sys.exit()
		elif opt in ("-o", "--odir"):
			outputdir = arg
		elif opt in ("-n", "--nmap"):
			nmap_args = arg
		elif opt in ("-t", "--type"):
			type = arg
		elif opt in ("-a", "--address"):
			address = arg

	if type not in ("full", "ports", "enumerate"):
		print(usage)
		sys.exit(2)

	if address is None or address == '':
		print("Address is required\n")
		print(usage)
		sys.exit(2)

	# Detect OS versions
	scanner = pt_nmap.NmapScanner()
	nm = scanner.perform_scan(address, "os_detection", False, "")

	hosts = nm.all_hosts()

	scans = []

	for h in hosts:
		windows = False
		match_arr = nm._scan_result['scan'][h]['osmatch']
		if len(match_arr) < 1:
			print("No OS Match found. Assuming Linux")
		else:
			osmatch = ""
			for m in match_arr:
				if str(m).lower() in ("windows", 'linux', 'unix', "android", "macos"):
					osmatch = str(m)

			print(osmatch)

			if 'windows' in osmatch or 'Windows' in osmatch:
				windows = True

		if windows:
			print("Host " + h + " is Windows")
		else:
			print("Host " + h + " is Not Windows")

		# Perform initial scans

		tcp_fast = pt_nmap.NmapScanner()
		tcp_fast.perform_scan_async(h, "tcp_fast", windows, nmap_args)
		scans.append(tcp_fast)

		tcp_full = pt_nmap.NmapScanner()
		tcp_full.perform_scan_async(h, "tcp_full", windows, nmap_args)
		scans.append(tcp_full)

		udp_fast = pt_nmap.NmapScanner()
		udp_fast.perform_scan_async(h, "udp_fast", windows, nmap_args)
		scans.append(udp_fast)

		#udp_full = pt_nmap.NmapScanner()
		#udp_full.perform_scan_async(h, "udp_full", windows, nmap_args)
		#scans.append(udp_full)


	# Process results as they come in

	while len(scans) is not 0:
		time.sleep(5)

		for s in scans:

			if not s.nma.still_scanning():
				r = list(s.scan_results)

				# Process. Parse data into a better format, break off into threads to do more scans
				print(r)

				s.scan_results = Manager().list()
				scans.remove(s)

	print("All scans done!")

if __name__ == "__main__":
	main(sys.argv[1:])
